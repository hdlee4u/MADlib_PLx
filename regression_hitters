---------------------------------------------
/* prediction modeling of Hitters Salary   */
/* by using MADlib                         */
/* using Linear Regression of MADlib, PL/R */
---------------------------------------------

-- Create table of 'hitters_profile'
DROP TABLE IF EXISTS hitters_profile;
CREATE TABLE hitters_profile (
	id 	INTEGER NOT NULL PRIMARY KEY, 
	name 	VARCHAR(50), 
	division 	TEXT, 
	league 	TEXT, 
	new_league 	TEXT
) DISTRIBUTED BY (id);

-- Insert data into 'hitters_profile' table
INSERT INTO hitters_profile (id, name, division, league, new_league) VALUES 
(1,'Andy Allanson','E','A','A'), (2,'Alan Ashby','W','N','N'), (3,'Alvin Davis','W','A','A'), (4,'Andre Dawson','E','N','N'),
(5,'Andres Galarraga','E','N','N'), (6,'Alfredo Griffin','W','A','A'), (7,'Al Newman','E','N','A'), (8,'Argenis Salazar','W','A','A'),
(9,'Andres Thomas','W','N','N'), (10,'Andre Thornton','E','A','A'), (11,'Alan Trammell','E','A','A'), (12,'Alex Trevino','W','N','N'),
(13,'Andy VanSlyke','E','N','N'), (14,'Alan Wiggins','E','A','A'), (15,'Bill Almon','E','N','N'), (16,'Billy Beane','W','A','A'),
(17,'Buddy Bell','W','N','N'), (18,'Buddy Biancalana','W','A','A'), (19,'Bruce Bochte','W','A','A'), (20,'Bruce Bochy','W','N','N'),
(21,'Barry Bonds','E','N','N'), (22,'Bobby Bonilla','W','A','N'), (23,'Bob Boone','W','A','A'), (24,'Bob Brenly','W','N','N'),
(25,'Bill Buckner','E','A','A'), (26,'Brett Butler','E','A','A'), (27,'Bob Dernier','E','N','N'), (28,'Bo Diaz','W','N','N'),
(29,'Bill Doran','W','N','N'), (30,'Brian Downing','W','A','A'), (31,'Bobby Grich','W','A','A'), (32,'Billy Hatcher','W','N','N'),
(33,'Bob Horner','W','N','N'), (34,'Brook Jacoby','E','A','A'), (35,'Bob Kearney','W','A','A'), (36,'Bill Madlock','W','N','N'),
(37,'Bobby Meacham','E','A','A'), (38,'Bob Melvin','W','N','N'), (39,'Ben Oglivie','E','A','A'), (40,'Bip Roberts','W','N','N'),
(41,'BillyJo Robidoux','E','A','A'), (42,'Bill Russell','W','N','N'), (43,'Billy Sample','W','N','N'), (44,'Bill Schroeder','E','A','A'),
(45,'Butch Wynegar','E','A','A'), (46,'Chris Bando','E','A','A'), (47,'Chris Brown','W','N','N'), (48,'Carmen Castillo','E','A','A'),
(49,'Cecil Cooper','E','A','A'), (50,'Chili Davis','W','N','N'), (51,'Carlton Fisk','W','A','A'), (52,'Curt Ford','E','N','N'),
(53,'Cliff Johnson','E','A','A'), (54,'Carney Lansford','W','A','A'), (55,'Chet Lemon','E','A','A'), (56,'Candy Maldonado','W','N','N'),
(57,'Carmelo Martinez','W','N','N'), (58,'Charlie Moore','E','A','A'), (59,'Craig Reynolds','W','N','N'), (60,'Cal Ripken','E','A','A'),
(61,'Cory Snyder','E','A','A'), (62,'Chris Speier','E','N','N'), (63,'Curt Wilkerson','W','A','A'), (64,'Dave Anderson','W','N','N'),
(65,'Doug Baker','W','A','A'), (66,'Don Baylor','E','A','A'), (67,'Dann Bilardello','E','N','N'), (68,'Daryl Boston','W','A','A'),
(69,'Darnell Coles','E','A','A'), (70,'Dave Collins','E','A','A'), (71,'Dave Concepcion','W','N','N'), (72,'Darren Daulton','E','N','N'),
(73,'Doug DeCinces','W','A','A'), (74,'Darrell Evans','E','A','A'), (75,'Dwight Evans','E','A','A'), (76,'Damaso Garcia','E','A','N'),
(77,'Dan Gladden','W','N','A'), (78,'Danny Heep','E','N','N'), (79,'Dave Henderson','W','A','A'), (80,'Donnie Hill','W','A','A'),
(81,'Dave Kingman','W','A','A'), (82,'Davey Lopes','E','N','N'), (83,'Don Mattingly','E','A','A'), (84,'Darryl Motley','W','A','A'),
(85,'Dale Murphy','W','N','N'), (86,'Dwayne Murphy','W','A','A'), (87,'Dave Parker','W','N','N'), (88,'Dan Pasqua','E','A','A'),
(89,'Darrell Porter','W','A','A'), (90,'Dick Schofield','W','A','A'), (91,'Don Slaught','W','A','A'), (92,'Darryl Strawberry','E','N','N'),
(93,'Dale Sveum','E','A','A'), (94,'Danny Tartabull','W','A','A'), (95,'Dickie Thon','W','N','N'), (96,'Denny Walling','W','N','N'),
(97,'Dave Winfield','E','A','A'), (98,'Enos Cabell','W','N','N'), (99,'Eric Davis','W','N','N'), (100,'Eddie Milner','W','N','N'),
(101,'Eddie Murray','E','A','A'), (102,'Ernest Riles','E','A','A'), (103,'Ed Romero','E','A','A'), (104,'Ernie Whitt','E','A','A'),
(105,'Fred Lynn','E','A','A'), (106,'Floyd Rayford','E','A','A'), (107,'Franklin Stubbs','W','N','N'), (108,'Frank White','W','A','A'),
(109,'George Bell','E','A','A'), (110,'Glenn Braggs','E','A','A'), (111,'George Brett','W','A','A'), (112,'Greg Brock','W','N','A'),
(113,'Gary Carter','E','N','N'), (114,'Glenn Davis','W','N','N'), (115,'George Foster','E','N','N'), (116,'Gary Gaetti','W','A','A'),
(117,'Greg Gagne','W','A','A'), (118,'George Hendrick','W','A','A'), (119,'Glenn Hubbard','W','N','N'), (120,'Garth Iorg','E','A','A'),
(121,'Gary Matthews','E','N','N'), (122,'Graig Nettles','W','N','N'), (123,'Gary Pettis','W','A','A'), (124,'Gary Redus','E','N','A'),
(125,'Garry Templeton','W','N','N'), (126,'Gorman Thomas','W','A','A'), (127,'Greg Walker','W','A','A'), (128,'Gary Ward','W','A','A'),
(129,'Glenn Wilson','E','N','N'), (130,'Harold Baines','W','A','A'), (131,'Hubie Brooks','E','N','N'), (132,'Howard Johnson','E','N','N'),
(133,'Hal McRae','W','A','A'), (134,'Harold Reynolds','W','A','A'), (135,'Harry Spilman','W','N','N'), (136,'Herm Winningham','E','N','N'),
(137,'Jesse Barfield','E','A','A'), (138,'Juan Beniquez','E','A','A'), (139,'Juan Bonilla','E','A','N'), (140,'John Cangelosi','W','A','N'),
(141,'Jose Canseco','W','A','A'), (142,'Joe Carter','E','A','A'), (143,'Jack Clark','E','N','N'), (144,'Jose Cruz','W','N','N'),
(145,'Julio Cruz','W','A','A'), (146,'Jody Davis','E','N','N'), (147,'Jim Dwyer','E','A','A'), (148,'Julio Franco','E','A','A'),
(149,'Jim Gantner','E','A','A'), (150,'Johnny Grubb','E','A','A'), (151,'Jerry Hairston','W','A','A'), (152,'Jack Howell','W','A','A'),
(153,'John Kruk','W','N','N'), (154,'Jeffrey Leonard','W','N','N'), (155,'Jim Morrison','E','N','N'), (156,'John Moses','W','A','A'),
(157,'Jerry Mumphrey','E','N','N'), (158,'Joe Orsulak','E','N','N'), (159,'Jorge Orta','W','A','A'), (160,'Jim Presley','W','A','A'),
(161,'Jamie Quirk','W','A','A'), (162,'Johnny Ray','E','N','N'), (163,'Jeff Reed','W','A','N'), (164,'Jim Rice','E','A','A'),
(165,'Jerry Royster','W','N','A'), (166,'John Russell','E','N','N'), (167,'Juan Samuel','E','N','N'), (168,'John Shelby','E','A','A'), 
(169,'Joel Skinner','W','A','A'), (170,'Jeff Stone','E','N','N'), (171,'Jim Sundberg','W','A','N'), (172,'Jim Traber','E','A','A'),
(173,'Jose Uribe','W','N','N'), (174,'Jerry Willard','W','A','A'), (175,'Joel Youngblood','W','N','N'), (176,'Kevin Bass','W','N','N'),
(177,'Kal Daniels','W','N','N'), (178,'Kirk Gibson','E','A','A'), (179,'Ken Griffey','E','A','N'), (180,'Keith Hernandez','E','N','N'),
(181,'Kent Hrbek','W','A','A'), (182,'Ken Landreaux','W','N','N'), (183,'Kevin McReynolds','W','N','N'), (184,'Kevin Mitchell','E','N','N'),
(185,'Keith Moreland','E','N','N'), (186,'Ken Oberkfell','W','N','N'), (187,'Ken Phelps','W','A','A'), (188,'Kirby Puckett','W','A','A'),
(189,'Kurt Stillwell','W','N','N'), (190,'Leon Durham','E','N','N'), (191,'Len Dykstra','E','N','N'), (192,'Larry Herndon','E','A','A'),
(193,'Lee Lacy','E','A','A'), (194,'Len Matuszek','W','N','N'), (195,'Lloyd Moseby','E','A','A'), (196,'Lance Parrish','E','A','N'),
(197,'Larry Parrish','W','A','A'), (198,'Luis Rivera','E','N','N'), (199,'Larry Sheets','E','A','A'), (200,'Lonnie Smith','W','A','A'),
(201,'Lou Whitaker','E','A','A'), (202,'Mike Aldrete','W','N','N'), (203,'Marty Barrett','E','A','A'), (204,'Mike Brown','E','N','N'),
(205,'Mike Davis','W','A','A'), (206,'Mike Diaz','E','N','N'), (207,'Mariano Duncan','W','N','N'), (208,'Mike Easler','E','A','N'),
(209,'Mike Fitzgerald','E','N','N'), (210,'Mel Hall','E','A','A'), (211,'Mickey Hatcher','W','A','A'), (212,'Mike Heath','E','N','A'),
(213,'Mike Kingery','W','A','A'), (214,'Mike LaValliere','E','N','N'), (215,'Mike Marshall','W','N','N'), (216,'Mike Pagliarulo','E','A','A'),
(217,'Mark Salas','W','A','A'), (218,'Mike Schmidt','E','N','N'), (219,'Mike Scioscia','W','N','N'), (220,'Mickey Tettleton','W','A','A'),
(221,'Milt Thompson','E','N','N'), (222,'Mitch Webster','E','N','N'), (223,'Mookie Wilson','E','N','N'), (224,'Marvell Wynne','W','N','N'),
(225,'Mike Young','E','A','A'), (226,'Nick Esasky','W','N','N'), (227,'Ozzie Guillen','W','A','A'), (228,'Oddibe McDowell','W','A','A'),
(229,'Omar Moreno','W','N','N'), (230,'Ozzie Smith','E','N','N'), (231,'Ozzie Virgil','W','N','N'), (232,'Phil Bradley','W','A','A'),
(233,'Phil Garner','W','N','N'), (234,'Pete Incaviglia','W','A','A'), (235,'Paul Molitor','E','A','A'), (236,'Pete O_Brien','W','A','A'),
(237,'Pete Rose','W','N','N'), (238,'Pat Sheridan','E','A','A'), (239,'Pat Tabler','E','A','A'), (240,'Rafael Belliard','E','N','N'),
(241,'Rick Burleson','W','A','A'), (242,'Randy Bush','W','A','A'), (243,'Rick Cerone','E','A','A'), (244,'Ron Cey','E','N','A'),
(245,'Rob Deer','E','A','A'), (246,'Rick Dempsey','E','A','A'), (247,'Rich Gedman','E','A','A'), (248,'Ron Hassey','E','A','A'),
(249,'Rickey Henderson','E','A','A'), (250,'Reggie Jackson','W','A','A'), (251,'Ricky Jones','W','A','A'), (252,'Ron Kittle','W','A','A'),
(253,'Ray Knight','E','N','A'), (254,'Randy Kutcher','W','N','N'), (255,'Rudy Law','W','A','A'), (256,'Rick Leach','E','A','A'),
(257,'Rick Manning','E','A','A'), (258,'Rance Mulliniks','E','A','A'), (259,'Ron Oester','W','N','N'), (260,'Rey Quinones','E','A','A'),
(261,'Rafael Ramirez','W','N','N'), (262,'Ronn Reynolds','E','N','N'), (263,'Ron Roenicke','E','N','N'), (264,'Ryne Sandberg','E','N','N'),
(265,'Rafael Santana','E','N','N'), (266,'Rick Schu','E','N','N'), (267,'Ruben Sierra','W','A','A'), (268,'Roy Smalley','W','A','A'),
(269,'Robby Thompson','W','N','N'), (270,'Rob Wilfong','W','A','A'), (271,'Reggie Williams','W','N','N'), (272,'Robin Yount','E','A','A'),
(273,'Steve Balboni','W','A','A'), (274,'Scott Bradley','W','A','A'), (275,'Sid Bream','E','N','N'), (276,'Steve Buechele','W','A','A'),
(277,'Shawon Dunston','E','N','N'), (278,'Scott Fletcher','W','A','A'), (279,'Steve Garvey','W','N','N'), (280,'Steve Jeltz','E','N','N'),
(281,'Steve Lombardozzi','W','A','A'), (282,'Spike Owen','W','A','A'), (283,'Steve Sax','W','N','N'), (284,'Tony Armas','E','A','A'),
(285,'Tony Bernazard','E','A','A'), (286,'Tom Brookens','E','A','A'), (287,'Tom Brunansky','W','A','A'), (288,'Tony Fernandez','E','A','A'),
(289,'Tim Flannery','W','N','N'), (290,'Tom Foley','E','N','N'), (291,'Tony Gwynn','W','N','N'), (292,'Terry Harper','W','N','A'),
(293,'Toby Harrah','W','A','A'), (294,'Tommy Herr','E','N','N'), (295,'Tim Hulett','W','A','A'), (296,'Terry Kennedy','W','N','A'),
(297,'Tito Landrum','E','N','N'), (298,'Tim Laudner','W','A','A'), (299,'Tom O_Malley','E','A','A'), (300,'Tom Paciorek','W','A','A'),
(301,'Tony Pena','E','N','N'), (302,'Terry Pendleton','E','N','N'), (303,'Tony Perez','W','N','N'), (304,'Tony Phillips','W','A','A'),
(305,'Terry Puhl','W','N','N'), (306,'Tim Raines','E','N','N'), (307,'Ted Simmons','W','N','N'), (308,'Tim Teufel','E','N','N'),
(309,'Tim Wallach','E','N','N'), (310,'Vince Coleman','E','N','N'), (311,'Von Hayes','E','N','N'), (312,'Vance Law','E','N','N'),
(313,'Wally Backman','E','N','N'), (314,'Wade Boggs','E','A','A'), (315,'Will Clark','W','N','N'), (316,'Wally Joyner','W','A','A'), 
(317,'Wayne Krenchicki','E','N','N'), (318,'Willie McGee','E','N','N'), (319,'Willie Randolph','E','A','A'), (320,'Wayne Tolleson','W','A','A'),
(321,'Willie Upshaw','E','A','A'), (322,'Willie Wilson','W','A','A'); 

-- Check top 10 rows
SELECT * FROM hitters_profile ORDER BY id LIMIT 10;


-- Create table of 'hitters_performance'
DROP TABLE IF EXISTS hitters_performance;
CREATE TABLE hitters_performance (
	id	INTEGER NOT NULL PRIMARY KEY, 
	at_bat 	INTEGER, 
	hits 	INTEGER, 
	hm_run	INTEGER, 
	runs	INTEGER, 
	rbi	INTEGER, 
	walks	INTEGER, 
	years	INTEGER, 
	c_at_bat	INTEGER, 
	c_hits	INTEGER, 
	c_hm_run	INTEGER, 
	c_runs	INTEGER, 
	c_rbi	INTEGER, 
	c_walks	INTEGER, 
	put_outs	INTEGER, 
	assists	INTEGER, 
	errors	INTEGER, 
	salary	DOUBLE PRECISION
) DISTRIBUTED BY (id);

-- Insert data into 'hitters_performance'
INSERT INTO hitters_performance (id, at_bat, hits, hm_run, runs, rbi, walks, years, c_at_bat, 
c_hits, c_hm_run, c_runs, c_rbi, c_walks, put_outs, assists, errors, salary) VALUES 
(1,293,66,1,30,29,14,1,293,66,1,30,29,14,446,33,20,NULL), (2,315,81,7,24,38,39,14,3449,835,69,321,414,375,632,43,10,475),
(3,479,130,18,66,72,76,3,1624,457,63,224,266,263,880,82,14,480), (4,496,141,20,65,78,37,11,5628,1575,225,828,838,354,200,11,3,500),
(5,321,87,10,39,42,30,2,396,101,12,48,46,33,805,40,4,91.5), (6,594,169,4,74,51,35,11,4408,1133,19,501,336,194,282,421,25,750),
(7,185,37,1,23,8,21,2,214,42,1,30,9,24,76,127,7,70), (8,298,73,0,24,24,7,3,509,108,0,41,37,12,121,283,9,100),
(9,323,81,6,26,32,8,2,341,86,6,32,34,8,143,290,19,75), (10,401,92,17,49,66,65,13,5206,1332,253,784,890,866,0,0,0,1100),
(11,574,159,21,107,75,59,10,4631,1300,90,702,504,488,238,445,22,517.143), (12,202,53,4,31,26,27,9,1876,467,15,192,186,161,304,45,11,512.5),
(13,418,113,13,48,61,47,4,1512,392,41,205,204,203,211,11,7,550), (14,239,60,0,30,11,22,6,1941,510,4,309,103,207,121,151,6,700),
(15,196,43,7,29,27,30,13,3231,825,36,376,290,238,80,45,8,240), (16,183,39,3,20,15,11,3,201,42,3,20,16,11,118,0,0,NULL),
(17,568,158,20,89,75,73,15,8068,2273,177,1045,993,732,105,290,10,775), (18,190,46,2,24,8,15,5,479,102,5,65,23,39,102,177,16,175),
(19,407,104,6,57,43,65,12,5233,1478,100,643,658,653,912,88,9,NULL), (20,127,32,8,16,22,14,8,727,180,24,67,82,56,202,22,2,135),
(21,413,92,16,72,48,65,1,413,92,16,72,48,65,280,9,5,100), (22,426,109,3,55,43,62,1,426,109,3,55,43,62,361,22,2,115),
(23,22,10,1,4,2,1,6,84,26,2,9,9,3,812,84,11,NULL), (24,472,116,16,60,62,74,6,1924,489,67,242,251,240,518,55,3,600),
(25,629,168,18,73,102,40,18,8424,2464,164,1008,1072,402,1067,157,14,776.667), (26,587,163,4,92,51,70,6,2695,747,17,442,198,317,434,9,3,765),
(27,324,73,4,32,18,22,7,1931,491,13,291,108,180,222,3,3,708.333), (28,474,129,10,50,56,40,10,2331,604,61,246,327,166,732,83,13,750),
(29,550,152,6,92,37,81,5,2308,633,32,349,182,308,262,329,16,625), (30,513,137,20,90,95,90,14,5201,1382,166,763,734,784,267,5,3,900),
(31,313,84,9,42,30,39,17,6890,1833,224,1033,864,1087,127,221,7,NULL), (32,419,108,6,55,36,22,3,591,149,8,80,46,31,226,7,4,110),
(33,517,141,27,70,87,52,9,3571,994,215,545,652,337,1378,102,8,NULL), (34,583,168,17,83,80,56,5,1646,452,44,219,208,136,109,292,25,612.5),
(35,204,49,6,23,25,12,7,1309,308,27,126,132,66,419,46,5,300), (36,379,106,10,38,60,30,14,6207,1906,146,859,803,571,72,170,24,850),
(37,161,36,0,19,10,17,4,1053,244,3,156,86,107,70,149,12,NULL), (38,268,60,5,24,25,15,2,350,78,5,34,29,18,442,59,6,90),
(39,346,98,5,31,53,30,16,5913,1615,235,784,901,560,0,0,0,NULL), (40,241,61,1,34,12,14,1,241,61,1,34,12,14,166,172,10,NULL),
(41,181,41,1,15,21,33,2,232,50,4,20,29,45,326,29,5,67.5), (42,216,54,0,21,18,15,18,7318,1926,46,796,627,483,103,84,5,NULL),
(43,200,57,6,23,14,14,9,2516,684,46,371,230,195,69,1,1,NULL), (44,217,46,7,32,19,9,4,694,160,32,86,76,32,307,25,1,180),
(45,194,40,7,19,29,30,11,4183,1069,64,486,493,608,325,22,2,NULL), (46,254,68,2,28,26,22,6,999,236,21,108,117,118,359,30,4,305),
(47,416,132,7,57,49,33,3,932,273,24,113,121,80,73,177,18,215), (48,205,57,8,34,32,9,5,756,192,32,117,107,51,58,4,4,247.5),
(49,542,140,12,46,75,41,16,7099,2130,235,987,1089,431,697,61,9,NULL), (50,526,146,13,71,70,84,6,2648,715,77,352,342,289,303,9,9,815),
(51,457,101,14,42,63,22,17,6521,1767,281,1003,977,619,389,39,4,875), (52,214,53,2,30,29,23,2,226,59,2,32,32,27,109,7,3,70),
(53,19,7,0,1,2,1,4,41,13,1,3,4,4,0,0,0,NULL), (54,591,168,19,80,72,39,9,4478,1307,113,634,563,319,67,147,4,1200),
(55,403,101,12,45,53,39,12,5150,1429,166,747,666,526,316,6,5,675), (56,405,102,18,49,85,20,6,950,231,29,99,138,64,161,10,3,415),
(57,244,58,9,28,25,35,4,1335,333,49,164,179,194,142,14,2,340), (58,235,61,3,24,39,21,14,3926,1029,35,441,401,333,425,43,4,NULL),
(59,313,78,6,32,41,12,12,3742,968,35,409,321,170,106,206,7,416.667), (60,627,177,25,98,81,70,6,3210,927,133,529,472,313,240,482,13,1350),
(61,416,113,24,58,69,16,1,416,113,24,58,69,16,203,70,10,90), (62,155,44,6,21,23,15,16,6631,1634,98,698,661,777,53,88,3,275),
(63,236,56,0,27,15,11,4,1115,270,1,116,64,57,125,199,13,230), (64,216,53,1,31,15,22,4,926,210,9,118,69,114,73,152,11,225),
(65,24,3,0,1,0,2,3,159,28,0,20,12,9,80,4,0,NULL), (66,585,139,31,93,94,62,17,7546,1982,315,1141,1179,727,0,0,0,950),
(67,191,37,4,12,17,14,4,773,163,16,61,74,52,391,38,8,NULL), (68,199,53,5,29,22,21,3,514,120,8,57,40,39,152,3,5,75),
(69,521,142,20,67,86,45,4,815,205,22,99,103,78,107,242,23,105), (70,419,113,1,44,27,44,12,4484,1231,32,612,344,422,211,2,1,NULL),
(71,311,81,3,42,30,26,17,8247,2198,100,950,909,690,153,223,10,320), (72,138,31,8,18,21,38,3,244,53,12,33,32,55,244,21,4,NULL),
(73,512,131,26,69,96,52,14,5347,1397,221,712,815,548,119,216,12,850), (74,507,122,29,78,85,91,18,7761,1947,347,1175,1152,1380,808,108,2,535),
(75,529,137,26,86,97,97,15,6661,1785,291,1082,949,989,280,10,5,933.333), (76,424,119,6,57,46,13,9,3651,1046,32,461,301,112,224,286,8,850),
(77,351,97,4,55,29,39,4,1258,353,16,196,110,117,226,7,3,210), (78,195,55,5,24,33,30,8,1313,338,25,144,149,153,83,2,1,NULL),
(79,388,103,15,59,47,39,6,2174,555,80,285,274,186,182,9,4,325), (80,339,96,4,37,29,23,4,1064,290,11,123,108,55,104,213,9,275),
(81,561,118,35,70,94,33,16,6677,1575,442,901,1210,608,463,32,8,NULL), (82,255,70,7,49,35,43,15,6311,1661,154,1019,608,820,51,54,8,450),
(83,677,238,31,117,113,53,5,2223,737,93,349,401,171,1377,100,6,1975), (84,227,46,7,23,20,12,5,1325,324,44,156,158,67,92,2,2,NULL),
(85,614,163,29,89,83,75,11,5017,1388,266,813,822,617,303,6,6,1900), (86,329,83,9,50,39,56,9,3828,948,145,575,528,635,276,6,2,600),
(87,637,174,31,89,116,56,14,6727,2024,247,978,1093,495,278,9,9,1041.667), (88,280,82,16,44,45,47,2,428,113,25,61,70,63,148,4,2,110),
(89,155,41,12,21,29,22,16,5409,1338,181,746,805,875,165,9,1,260), (90,458,114,13,67,57,48,4,1350,298,28,160,123,122,246,389,18,475),
(91,314,83,13,39,46,16,5,1457,405,28,156,159,76,533,40,4,431.5), (92,475,123,27,76,93,72,4,1810,471,108,292,343,267,226,10,6,1220),
(93,317,78,7,35,35,32,1,317,78,7,35,35,32,45,122,26,70), (94,511,138,25,76,96,61,3,592,164,28,87,110,71,157,7,8,145),
(95,278,69,3,24,21,29,8,2079,565,32,258,192,162,142,210,10,NULL), (96,382,119,13,54,58,36,12,2133,594,41,287,294,227,59,156,9,595),
(97,565,148,24,90,104,77,14,7287,2083,305,1135,1234,791,292,9,5,1861.46), (98,277,71,2,27,29,14,15,5952,1647,60,753,596,259,360,32,5,NULL),
(99,415,115,27,97,71,68,3,711,184,45,156,119,99,274,2,7,300), (100,424,110,15,70,47,36,7,2130,544,38,335,174,258,292,6,3,490),
(101,495,151,17,61,84,78,10,5624,1679,275,884,1015,709,1045,88,13,2460), (102,524,132,9,69,47,54,2,972,260,14,123,92,90,212,327,20,NULL),
(103,233,49,2,41,23,18,8,1350,336,7,166,122,106,102,132,10,375), (104,395,106,16,48,56,35,10,2303,571,86,266,323,248,709,41,7,NULL),
(105,397,114,23,67,67,53,13,5589,1632,241,906,926,716,244,2,4,NULL), (106,210,37,8,15,19,15,6,994,244,36,107,114,53,40,115,15,NULL),
(107,420,95,23,55,58,37,3,646,139,31,77,77,61,206,10,7,NULL), (108,566,154,22,76,84,43,14,6100,1583,131,743,693,300,316,439,10,750),
(109,641,198,31,101,108,41,5,2129,610,92,297,319,117,269,17,10,1175), (110,215,51,4,19,18,11,1,215,51,4,19,18,11,116,5,12,70),
(111,441,128,16,70,73,80,14,6675,2095,209,1072,1050,695,97,218,16,1500), (112,325,76,16,33,52,37,5,1506,351,71,195,219,214,726,87,3,385),
(113,490,125,24,81,105,62,13,6063,1646,271,847,999,680,869,62,8,1925.571), (114,574,152,31,91,101,64,3,985,260,53,148,173,95,1253,111,11,215),
(115,284,64,14,30,42,24,18,7023,1925,348,986,1239,666,96,4,4,NULL), (116,596,171,34,91,108,52,6,2862,728,107,361,401,224,118,334,21,900),
(117,472,118,12,63,54,30,4,793,187,14,102,80,50,228,377,26,155), (118,283,77,14,45,47,26,16,6840,1910,259,915,1067,546,144,6,5,700),
(119,408,94,4,42,36,66,9,3573,866,59,429,365,410,282,487,19,535), (120,327,85,3,30,44,20,8,2140,568,16,216,208,93,91,185,12,362.5),
(121,370,96,21,49,46,60,15,6986,1972,231,1070,955,921,137,5,9,733.333), (122,354,77,16,36,55,41,20,8716,2172,384,1172,1267,1057,83,174,16,200),
(123,539,139,5,93,58,69,5,1469,369,12,247,126,198,462,9,7,400), (124,340,84,11,62,33,47,5,1516,376,42,284,141,219,185,8,4,400),
(125,510,126,2,42,44,35,11,5562,1578,44,703,519,256,207,358,20,737.5), (126,315,59,16,45,36,58,13,4677,1051,268,681,782,697,0,0,0,NULL),
(127,282,78,13,37,51,29,5,1649,453,73,211,280,138,670,57,5,500), (128,380,120,5,54,51,31,8,3118,900,92,444,419,240,237,8,1,600),
(129,584,158,15,70,84,42,5,2358,636,58,265,316,134,331,20,4,662.5), (130,570,169,21,72,88,38,7,3754,1077,140,492,589,263,295,15,5,950),
(131,306,104,14,50,58,25,7,2954,822,55,313,377,187,116,222,15,750), (132,220,54,10,30,39,31,5,1185,299,40,145,154,128,50,136,20,297.5),
(133,278,70,7,22,37,18,18,7186,2081,190,935,1088,643,0,0,0,325), (134,445,99,1,46,24,29,4,618,129,1,72,31,48,278,415,16,87.5),
(135,143,39,5,18,30,15,9,639,151,16,80,97,61,138,15,1,175), (136,185,40,4,23,11,18,3,524,125,7,58,37,47,97,2,2,90),
(137,589,170,40,107,108,69,6,2325,634,128,371,376,238,368,20,3,1237.5), (138,343,103,6,48,36,40,15,4338,1193,70,581,421,325,211,56,13,430),
(139,284,69,1,33,18,25,5,1407,361,6,139,98,111,122,140,5,NULL), (140,438,103,2,65,32,71,2,440,103,2,67,32,71,276,7,9,100),
(141,600,144,33,85,117,65,2,696,173,38,101,130,69,319,4,14,165), (142,663,200,29,108,121,32,4,1447,404,57,210,222,68,241,8,6,250),
(143,232,55,9,34,23,45,12,4405,1213,194,702,705,625,623,35,3,1300), (144,479,133,10,48,72,55,17,7472,2147,153,980,1032,854,237,5,4,773.333),
(145,209,45,0,38,19,42,10,3859,916,23,557,279,478,132,205,5,NULL), (146,528,132,21,61,74,41,6,2641,671,97,273,383,226,885,105,8,1008.333),
(147,160,39,8,18,31,22,14,2128,543,56,304,268,298,33,3,0,275), (148,599,183,10,80,74,32,5,2482,715,27,330,326,158,231,374,18,775),
(149,497,136,7,58,38,26,11,3871,1066,40,450,367,241,304,347,10,850), (150,210,70,13,32,51,28,15,4040,1130,97,544,462,551,0,0,0,365),
(151,225,61,5,32,26,26,11,1568,408,25,202,185,257,132,9,0,NULL), (152,151,41,4,26,21,19,2,288,68,9,45,39,35,28,56,2,95),
(153,278,86,4,33,38,45,1,278,86,4,33,38,45,102,4,2,110), (154,341,95,6,48,42,20,10,2964,808,81,379,428,221,158,4,5,100),
(155,537,147,23,58,88,47,10,2744,730,97,302,351,174,92,257,20,277.5), (156,399,102,3,56,34,34,5,670,167,4,89,48,54,211,9,3,80),
(157,309,94,5,37,32,26,13,4618,1330,57,616,522,436,161,3,3,600), (158,401,100,2,60,19,28,4,876,238,2,126,44,55,193,11,4,NULL),
(159,336,93,9,35,46,23,15,5779,1610,128,730,741,497,0,0,0,NULL), (160,616,163,27,83,107,32,3,1437,377,65,181,227,82,110,308,15,200),
(161,219,47,8,24,26,17,12,1188,286,23,100,125,63,260,58,4,NULL), (162,579,174,7,67,78,58,6,3053,880,32,366,337,218,280,479,5,657),
(163,165,39,2,13,9,16,3,196,44,2,18,10,18,332,19,2,75), (164,618,200,20,98,110,62,13,7127,2163,351,1104,1289,564,330,16,8,2412.5),
(165,257,66,5,31,26,32,14,3910,979,33,518,324,382,87,166,14,250), (166,315,76,13,35,60,25,3,630,151,24,68,94,55,498,39,13,155),
(167,591,157,16,90,78,26,4,2020,541,52,310,226,91,290,440,25,640), (168,404,92,11,54,49,18,6,1354,325,30,188,135,63,222,5,5,300),
(169,315,73,5,23,37,16,4,450,108,6,38,46,28,227,15,3,110), (170,249,69,6,32,19,20,4,702,209,10,97,48,44,103,8,2,NULL),
(171,429,91,12,41,42,57,13,5590,1397,83,578,579,644,686,46,4,825), (172,212,54,13,28,44,18,2,233,59,13,31,46,20,243,23,5,NULL),
(173,453,101,3,46,43,61,3,948,218,6,96,72,91,249,444,16,195), (174,161,43,4,17,26,22,3,707,179,21,77,99,76,300,12,2,NULL),
(175,184,47,5,20,28,18,11,3327,890,74,419,382,304,49,2,0,450), (176,591,184,20,83,79,38,5,1689,462,40,219,195,82,303,12,5,630),
(177,181,58,6,34,23,22,1,181,58,6,34,23,22,88,0,3,86.5), (178,441,118,28,84,86,68,8,2723,750,126,433,420,309,190,2,2,1300),
(179,490,150,21,69,58,35,14,6126,1839,121,983,707,600,96,5,3,1000), (180,551,171,13,94,83,94,13,6090,1840,128,969,900,917,1199,149,5,1800),
(181,550,147,29,85,91,71,6,2816,815,117,405,474,319,1218,104,10,1310), (182,283,74,4,34,29,22,10,3919,1062,85,505,456,283,145,5,7,737.5),
(183,560,161,26,89,96,66,4,1789,470,65,233,260,155,332,9,8,625), (184,328,91,12,51,43,33,2,342,94,12,51,44,33,145,59,8,125),
(185,586,159,12,72,79,53,9,3082,880,83,363,477,295,181,13,4,1043.333), (186,503,136,5,62,48,83,10,3423,970,20,408,303,414,65,258,8,725),
(187,344,85,24,69,64,88,7,911,214,64,150,156,187,0,0,0,300), (188,680,223,31,119,96,34,3,1928,587,35,262,201,91,429,8,6,365),
(189,279,64,0,31,26,30,1,279,64,0,31,26,30,107,205,16,75), (190,484,127,20,66,65,67,7,3006,844,116,436,458,377,1231,80,7,1183.333),
(191,431,127,8,77,45,58,2,667,187,9,117,64,88,283,8,3,202.5), (192,283,70,8,33,37,27,12,4479,1222,94,557,483,307,156,2,2,225),
(193,491,141,11,77,47,37,15,4291,1240,84,615,430,340,239,8,2,525), (194,199,52,9,26,28,21,6,805,191,30,113,119,87,235,22,5,265),
(195,589,149,21,89,86,64,7,3558,928,102,513,471,351,371,6,6,787.5), (196,327,84,22,53,62,38,10,4273,1123,212,577,700,334,483,48,6,800),
(197,464,128,28,67,94,52,13,5829,1552,210,740,840,452,0,0,0,587.5), (198,166,34,0,20,13,17,1,166,34,0,20,13,17,64,119,9,NULL),
(199,338,92,18,42,60,21,3,682,185,36,88,112,50,0,0,0,145), (200,508,146,8,80,44,46,9,3148,915,41,571,289,326,245,5,9,NULL),
(201,584,157,20,95,73,63,10,4704,1320,93,724,522,576,276,421,11,420), (202,216,54,2,27,25,33,1,216,54,2,27,25,33,317,36,1,75),
(203,625,179,4,94,60,65,5,1696,476,12,216,163,166,303,450,14,575), (204,243,53,4,18,26,27,4,853,228,23,101,110,76,107,3,3,NULL),
(205,489,131,19,77,55,34,7,2051,549,62,300,263,153,310,9,9,780), (206,209,56,12,22,36,19,2,216,58,12,24,37,19,201,6,3,90),
(207,407,93,8,47,30,30,2,969,230,14,121,69,68,172,317,25,150), (208,490,148,14,64,78,49,13,3400,1000,113,445,491,301,0,0,0,700),
(209,209,59,6,20,37,27,4,884,209,14,66,106,92,415,35,3,NULL), (210,442,131,18,68,77,33,6,1416,398,47,210,203,136,233,7,7,550),
(211,317,88,3,40,32,19,8,2543,715,28,269,270,118,220,16,4,NULL), (212,288,65,8,30,36,27,9,2815,698,55,315,325,189,259,30,10,650),
(213,209,54,3,25,14,12,1,209,54,3,25,14,12,102,6,3,68), (214,303,71,3,18,30,36,3,344,76,3,20,36,45,468,47,6,100),
(215,330,77,19,47,53,27,6,1928,516,90,247,288,161,149,8,6,670), (216,504,120,28,71,71,54,3,1085,259,54,150,167,114,103,283,19,175),
(217,258,60,8,28,33,18,3,638,170,17,80,75,36,358,32,8,137), (218,20,1,0,0,0,0,2,41,9,2,6,7,4,78,220,6,2127.333),
(219,374,94,5,36,26,62,7,1968,519,26,181,199,288,756,64,15,875), (220,211,43,10,26,35,39,3,498,116,14,59,55,78,463,32,8,120),
(221,299,75,6,38,23,26,3,580,160,8,71,33,44,212,1,2,140), (222,576,167,8,89,49,57,4,822,232,19,132,83,79,325,12,8,210),
(223,381,110,9,61,45,32,7,3015,834,40,451,249,168,228,7,5,800), (224,288,76,7,34,37,15,4,1644,408,16,198,120,113,203,3,3,240),
(225,369,93,9,43,42,49,5,1258,323,54,181,177,157,149,1,6,350), (226,330,76,12,35,41,47,4,1367,326,55,167,198,167,512,30,5,NULL),
(227,547,137,2,58,47,12,2,1038,271,3,129,80,24,261,459,22,175), (228,572,152,18,105,49,65,2,978,249,36,168,91,101,325,13,3,200),
(229,359,84,4,46,27,21,12,4992,1257,37,699,386,387,151,8,5,NULL), (230,514,144,0,67,54,79,9,4739,1169,13,583,374,528,229,453,15,1940),
(231,359,80,15,45,48,63,7,1493,359,61,176,202,175,682,93,13,700), (232,526,163,12,88,50,77,4,1556,470,38,245,167,174,250,11,1,750),
(233,313,83,9,43,41,30,14,5885,1543,104,751,714,535,58,141,23,450), (234,540,135,30,82,88,55,1,540,135,30,82,88,55,157,6,14,172),
(235,437,123,9,62,55,40,9,4139,1203,79,676,390,364,82,170,15,1260), (236,551,160,23,86,90,87,5,2235,602,75,278,328,273,1224,115,11,NULL),
(237,237,52,0,15,25,30,24,14053,4256,160,2165,1314,1566,523,43,6,750), (238,236,56,6,41,19,21,5,1257,329,24,166,125,105,172,1,4,190),
(239,473,154,6,61,48,29,6,1966,566,29,250,252,178,846,84,9,580), (240,309,72,0,33,31,26,5,354,82,0,41,32,26,117,269,12,130),
(241,271,77,5,35,29,33,12,4933,1358,48,630,435,403,62,90,3,450), (242,357,96,7,50,45,39,5,1394,344,43,178,192,136,167,2,4,300),
(243,216,56,4,22,18,15,12,2796,665,43,266,304,198,391,44,4,250), (244,256,70,13,42,36,44,16,7058,1845,312,965,1128,990,41,118,8,1050),
(245,466,108,33,75,86,72,3,652,142,44,102,109,102,286,8,8,215), (246,327,68,13,42,29,45,18,3949,939,78,438,380,466,659,53,7,400),
(247,462,119,16,49,65,37,7,2131,583,69,244,288,150,866,65,6,NULL), (248,341,110,9,45,49,46,9,2331,658,50,249,322,274,251,9,4,560),
(249,608,160,28,130,74,89,8,4071,1182,103,862,417,708,426,4,6,1670), (250,419,101,18,65,58,92,20,9528,2510,548,1509,1659,1342,0,0,0,487.5),
(251,33,6,0,2,4,7,1,33,6,0,2,4,7,205,5,4,NULL), (252,376,82,21,42,60,35,5,1770,408,115,238,299,157,0,0,0,425),
(253,486,145,11,51,76,40,11,3967,1102,67,410,497,284,88,204,16,500), (254,186,44,7,28,16,11,1,186,44,7,28,16,11,99,3,1,NULL),
(255,307,80,1,42,36,29,7,2421,656,18,379,198,184,145,2,2,NULL), (256,246,76,5,35,39,13,6,912,234,12,102,96,80,44,0,1,250),
(257,205,52,8,31,27,17,12,5134,1323,56,643,445,459,155,3,2,400), (258,348,90,11,50,45,43,10,2288,614,43,295,273,269,60,176,6,450),
(259,523,135,8,52,44,52,9,3368,895,39,377,284,296,367,475,19,750), (260,312,68,2,32,22,24,1,312,68,2,32,22,24,86,150,15,70),
(261,496,119,8,57,33,21,7,3358,882,36,365,280,165,155,371,29,875), (262,126,27,3,8,10,5,4,239,49,3,16,13,14,190,2,9,190),
(263,275,68,5,42,42,61,6,961,238,16,128,104,172,181,3,2,191), (264,627,178,14,68,76,46,6,3146,902,74,494,345,242,309,492,5,740),
(265,394,86,1,38,28,36,4,1089,267,3,94,71,76,203,369,16,250), (266,208,57,8,32,25,18,3,653,170,17,98,54,62,42,94,13,140),
(267,382,101,16,50,55,22,1,382,101,16,50,55,22,200,7,6,97.5), (268,459,113,20,59,57,68,12,5348,1369,155,713,660,735,0,0,0,740),
(269,549,149,7,73,47,42,1,549,149,7,73,47,42,255,450,17,140), (270,288,63,3,25,33,16,10,2682,667,38,315,259,204,135,257,7,341.667),
(271,303,84,4,35,32,23,2,312,87,4,39,32,23,179,5,3,NULL), (272,522,163,9,82,46,62,13,7037,2019,153,1043,827,535,352,9,1,1000),
(273,512,117,29,54,88,43,6,1750,412,100,204,276,155,1236,98,18,100), (274,220,66,5,20,28,13,3,290,80,5,27,31,15,281,21,3,90),
(275,522,140,16,73,77,60,4,730,185,22,93,106,86,1320,166,17,200), (276,461,112,18,54,54,35,2,680,160,24,76,75,49,111,226,11,135),
(277,581,145,17,66,68,21,2,831,210,21,106,86,40,320,465,32,155), (278,530,159,3,82,50,47,6,1619,426,11,218,149,163,196,354,15,475),
(279,557,142,21,58,81,23,18,8759,2583,271,1138,1299,478,1160,53,7,1450), (280,439,96,0,44,36,65,4,711,148,1,68,56,99,229,406,22,150),
(281,453,103,8,53,33,52,2,507,123,8,63,39,58,289,407,6,105), (282,528,122,1,67,45,51,4,1716,403,12,211,146,155,209,372,17,350),
(283,633,210,6,91,56,59,6,3070,872,19,420,230,274,367,432,16,90), (284,16,2,0,1,0,0,2,28,4,0,1,0,0,247,4,8,NULL),
(285,562,169,17,88,73,53,8,3181,841,61,450,342,373,351,442,17,530), (286,281,76,3,42,25,20,8,2658,657,48,324,300,179,106,144,7,341.667),
(287,593,152,23,69,75,53,6,2765,686,133,369,384,321,315,10,6,940), (288,687,213,10,91,65,27,4,1518,448,15,196,137,89,294,445,13,350),
(289,368,103,3,48,28,54,8,1897,493,9,207,162,198,209,246,3,326.667), (290,263,70,1,26,23,30,4,888,220,9,83,82,86,81,147,4,250),
(291,642,211,14,107,59,52,5,2364,770,27,352,230,193,337,19,4,740), (292,265,68,8,26,30,29,7,1337,339,32,135,163,128,92,5,3,425),
(293,289,63,7,36,41,44,17,7402,1954,195,1115,919,1153,166,211,7,NULL), (294,559,141,2,48,61,73,8,3162,874,16,421,349,359,352,414,9,925),
(295,520,120,17,53,44,21,4,927,227,22,106,80,52,70,144,11,185), (296,19,4,1,2,3,1,1,19,4,1,2,3,1,692,70,8,920),
(297,205,43,2,24,17,20,7,854,219,12,105,99,71,131,6,1,286.667), (298,193,47,10,21,29,24,6,1136,256,42,129,139,106,299,13,5,245),
(299,181,46,1,19,18,17,5,937,238,9,88,95,104,37,98,9,NULL), (300,213,61,4,17,22,3,17,4061,1145,83,488,491,244,178,45,4,235),
(301,510,147,10,56,52,53,7,2872,821,63,307,340,174,810,99,18,1150), (302,578,138,1,56,59,34,3,1399,357,7,149,161,87,133,371,20,160),
(303,200,51,2,14,29,25,23,9778,2732,379,1272,1652,925,398,29,7,NULL), (304,441,113,5,76,52,76,5,1546,397,17,226,149,191,160,290,11,425),
(305,172,42,3,17,14,15,10,4086,1150,57,579,363,406,65,0,0,900), (306,580,194,9,91,62,78,8,3372,1028,48,604,314,469,270,13,6,NULL),
(307,127,32,4,14,25,12,19,8396,2402,242,1048,1348,819,167,18,6,500), (308,279,69,4,35,31,32,4,1359,355,31,180,148,158,133,173,9,277.5),
(309,480,112,18,50,71,44,7,3031,771,110,338,406,239,94,270,16,750), (310,600,139,0,94,29,60,2,1236,309,1,201,69,110,300,12,9,160),
(311,610,186,19,107,98,74,6,2728,753,69,399,366,286,1182,96,13,1300), (312,360,81,5,37,44,37,7,2268,566,41,279,257,246,170,284,3,525),
(313,387,124,1,67,27,36,7,1775,506,6,272,125,194,186,290,17,550), (314,580,207,8,107,71,105,5,2778,978,32,474,322,417,121,267,19,1600),
(315,408,117,11,66,41,34,1,408,117,11,66,41,34,942,72,11,120), (316,593,172,22,82,100,57,1,593,172,22,82,100,57,1222,139,15,165),
(317,221,53,2,21,23,22,8,1063,283,15,107,124,106,325,58,6,NULL), (318,497,127,7,65,48,37,5,2703,806,32,379,311,138,325,9,3,700),
(319,492,136,5,76,50,94,12,5511,1511,39,897,451,875,313,381,20,875), (320,475,126,3,61,43,52,6,1700,433,7,217,93,146,37,113,7,385),
(321,573,144,9,85,60,78,8,3198,857,97,470,420,332,1314,131,12,960), (322,631,170,9,77,44,31,11,4908,1457,30,775,357,249,408,4,3,1000);

-- Check top 10 rows
SELECT * FROM hitters_performance ORDER BY id LIMIT 10;


-- Merge two tables (hitters_profile, hitters_performance) into (hitters) table
DROP TABLE IF EXISTS hitters;
CREATE TABLE hitters AS 
	SELECT a.*, b.division, b.league, b.new_league FROM hitters_performance a
		INNER JOIN hitters_profile b
		ON a.id = b.id
	DISTRIBUTED BY (new_league);

-- Check top 10 rows
SELECT * FROM hitters ORDER BY id LIMIT 10;


-- Descriptive Statistics : run madlib.summary() function
DROP TABLE IF EXISTS hitters_summary;
SELECT * FROM madlib.summary(
	'hitters', -- Source table
	'hitters_summary' -- Output table
);

-- view the summary statistics
SELECT * FROM hitters_summary;


-- Remove missing values
-- create new table without missing value
DROP TABLE IF EXISTS hitters_2;
CREATE TABLE hitters_2 AS
	SELECT * FROM hitters WHERE salary IS NOT NULL;

-- Check whether there is a missing value in 'salary' variable or not
SELECT COUNT(*) AS row_cnt FROM hitters WHERE salary IS NULL; -- 59
SELECT COUNT(*) AS row_cnt FROM hitters_2 WHERE salary IS NULL; -- 0


-- Log transformation of 'salary' variable
-- alter table add column
ALTER TABLE hitters_2 ADD COLUMN salary_log DOUBLE PRECISION;

-- Update column
UPDATE hitters_2 SET salary_log = ln(salary);

-- Check top 5 rows
SELECT * FROM hitters_2 ORDER BY id LIMIT 5;

-- Drop 'salary' column
ALTER TABLE hitters_2 DROP COLUMN salary;



-- Pearson's Correlation Analysis for all numeric columns
DROP TABLE IF EXISTS hitters_corr, hitters_corr_summary;
SELECT madlib.correlation(
	'hitters_2', -- Source table
	'hitters_corr', -- Output table
	'at_bat, hits, hm_run, runs, rbi, walks, years, c_at_bat, c_hits, c_hm_run, c_runs, c_rbi, c_walks, put_outs, assists, errors, salary_log' -- Target columns
);

-- View the correlation maxtrix
SELECT * FROM hitters_corr ORDER BY column_position;


-- Drop multicollinearity columns: 'at_bat', 'c_runs', 'c_rbi'
ALTER TABLE hitters_2 DROP COLUMN at_bat;
ALTER TABLE hitters_2 DROP COLUMN c_runs;
ALTER TABLE hitters_2 DROP COLUMN c_rbi;

-- Drop irrelevant columns: 'assists', 'errors'
ALTER TABLE hitters_2 DROP COLUMN assists;
ALTER TABLE hitters_2 DROP COLUMN errors;

SELECT * FROM hitters_2 ORDER BY id LIMIT 5;



-----------------
-- Create dummary variable for 'division', 'league'
ALTER TABLE hitters_2 ADD COLUMN league_n INTEGER;
ALTER TABLE hitters_2 ADD COLUMN division_w INTEGER;

-- Update column
UPDATE hitters_2 SET league_n = (SELECT CASE WHEN league = 'N' THEN 1 ELSE 0 END league_n);
UPDATE hitters_2 SET division_w = (SELECT CASE WHEN division = 'W' THEN 1 ELSE 0 END division_w);

SELECT * FROM hitters_2 ORDER BY id LIMIT 10;

-- Drop league, division
ALTER TABLE hitters_2 DROP COLUMN league;
ALTER TABLE hitters_2 DROP COLUMN division;

----- We can use madlib.encode_categorical_variables function as below ---
/*DROP TABLE IF EXISTS hitters_ctg, hitters_ctg_dictionary;
SELECT madlib.encode_categorical_variables (
	'hitters_2', -- Source table
	'hitters_ctg', -- Output table
	'league, division', -- Categorical columns
	'new_league', -- Categorical columns to exclude
	'id', -- Index column
	NULL, -- Top value
	'(league = A, division = E)' -- Value to drop for dummy encoding
);

SELECT * FROM hitters_ctg ORDER BY id LIMIT 5;

DROP TABLE IF EXISTS hitters_3;
CREATE TABLE hitters_3 AS 
	SELECT b.*, a."league_N", a."division_W" FROM hitters_ctg a
        JOIN (SELECT * FROM hitters_2) b
	ON a.id = b.id

SELECT * FROM hitters_3  LIMIT 5;
*/


--------------- Interaction Term, Polynomial Term
-- Create Interaction Term of 'hits' and 'walks', Quadratic of 'years'
ALTER TABLE hitters_2 ADD COLUMN hits_walks_inter INTEGER;
ALTER TABLE hitters_2 ADD COLUMN years_quadratic INTEGER;

-- Update column
UPDATE hitters_2 SET hits_walks_inter = hits*walks;
UPDATE hitters_2 SET years_quadratic = years^2;

SELECT id, hits, walks, hits_walks_inter, years, years_quadratic FROM hitters_2 ORDER BY id LIMIT 5;


---------------- Split Dataset into Train, Test set
-- Sample without replacement and create separate train and test tables
DROP TABLE IF EXISTS hitters_out_train, hitters_out_test;
SELECT madlib.train_test_split(
	'hitters_2', -- Source table
	'hitters_out', -- Output table
	0.8, -- Train proportion (train 0.8 : test 0.2)
	NULL, -- Default = 1 - train_proportion
	'new_league', -- Strata definition
	'*', -- Columns to output
	FALSE, -- Sample without replacement
	TRUE -- Separate output tables
);

-- View the number of observations per train, test set
SELECT new_league, COUNT(*) AS train_cnt FROM hitters_out_train GROUP BY new_league ORDER BY new_league;
SELECT new_league, COUNT(*) AS test_cnt FROM hitters_out_test GROUP BY new_league ORDER BY new_league;
SELECT * FROM hitters_out_train ORDER BY id LIMIT 5;
SELECT * FROM hitters_out_test ORDER BY id LIMIT 5;


------------------ Regression Model Training
-- (1st round) Train a regression model for all data in training set
DROP TABLE IF EXISTS hitters_linregr, hitters_linregr_summary;
SELECT madlib.linregr_train(
	'hitters_out_train', -- Source table 
	'hitters_linregr', -- Regression model output table
	'salary_log', -- Output variable
	'ARRAY[1, hits, hm_run, runs, rbi, walks, years, c_at_bat, c_hits, 
		c_hm_run, c_walks, put_outs, division_w, league_n, 
		hits_walks_inter, years_quadratic]' -- Input variable
);

-- View the result
SELECT 	UNNEST(ARRAY['intercept', 'hits', 'hm_run', 'runs', 'rbi', 'walks', 'years', 'c_at_bat', 
			'c_hits', 'c_hm_run', 'c_walks', 'put_outs', 'division_w', 'league_n', 
			'hits_walks_inter', 'years_quadratic']) AS attribute, 
	UNNEST(coef) AS coefficient, 
	UNNEST(std_err) AS standard_error, 
	UNNEST(t_stats) AS t_stats, 
	UNNEST(p_values) AS p_values
	FROM hitters_linregr;


-- (2nd round) Train a regression model after variable selection
DROP TABLE IF EXISTS hitters_linregr2, hitters_linregr2_summary;
SELECT madlib.linregr_train(
	'hitters_out_train', -- Source table 
	'hitters_linregr2', -- Regression model output table
	'salary_log', -- Output variable
	'ARRAY[1, rbi, walks, years, c_hits, 
		c_hm_run, put_outs, league_n, 
		hits_walks_inter, years_quadratic]' -- Input variable
);

-- View the results
SELECT 	UNNEST(ARRAY['intercept', 'rbi', 'walks', 'years',  
			'c_hits', 'c_hm_run', 'put_outs', 'league_n', 
			'hits_walks_inter', 'years_quadratic']) AS attribute, 
	UNNEST(coef) AS coefficient, 
	UNNEST(std_err) AS standard_error, 
	UNNEST(t_stats) AS t_stats, 
	UNNEST(p_values) AS p_values
	FROM hitters_linregr2;


-- (2-2 round) Now we make models per 'new_league'
DROP TABLE IF EXISTS hitters_linregr2_new_league, hitters_linregr2_new_league_summary;
SELECT madlib.linregr_train(
	'hitters_out_train', -- Source table 
	'hitters_linregr2_new_league', -- Regression model output table
	'salary_log', -- Output variable
	'ARRAY[1, rbi, walks, years, c_hits, 
		c_hm_run, put_outs, league_n, 
		hits_walks_inter, years_quadratic]', -- Input variable
	'new_league' -- separate models by Grouping column
);

-- View the results
SELECT 	new_league, 
	UNNEST(ARRAY['intercept', 'rbi', 'walks', 'years',  
			'c_hits', 'c_hm_run', 'put_outs', 'league_n', 
			'hits_walks_inter', 'years_quadratic']) AS attribute, 
	UNNEST(coef) AS coefficient, 
	UNNEST(std_err) AS standard_error, 
	UNNEST(t_stats) AS t_stats, 
	UNNEST(p_values) AS p_values
	FROM hitters_linregr2_new_league
	ORDER BY new_league, attribute;


--------------- Performance Evaluation
-- Create Comparison table b/w predicted value and actual
DROP TABLE IF EXISTS hitters_out_test_tbl;
CREATE TABLE hitters_out_test_tbl AS
	SELECT hitters_out_test.id, 
		exp(hitters_out_test.salary_log) AS actual_salary, 
		exp(madlib.linregr_predict(
			m.coef, 
			ARRAY[1, rbi, walks, years, c_hits, 
			c_hm_run, put_outs, league_n, 
			hits_walks_inter, years_quadratic]
			)) AS predict_salary,
		exp(hitters_out_test.salary_log) - 
			exp(madlib.linregr_predict(
				m.coef, 
				ARRAY[1, rbi, walks, years, c_hits,
					c_hm_run, put_outs, league_n, 
					hits_walks_inter, years_quadratic]
			)) AS residual
		FROM hitters_out_test, hitters_linregr2 m
		ORDER BY id; 

-- View the hitters_out_test_tbl
SELECT * FROM hitters_out_test_tbl ORDER BY id LIMIT 10;	

-- Calculate MSE(Mean Squared Error)
DROP TABLE IF EXISTS tbl_out_mse;
SELECT madlib.mean_squared_error(
	'hitters_out_test_tbl', -- Source table
	'tbl_out_mse', -- Output table
	'predict_salary', -- Predicted value
	'actual_salary' -- Actual value
	);

SELECT * FROM tbl_out_mse;

-- Calculate MAPE(Mean Absolute Percentage Error)
DROP TABLE IF EXISTS tbl_out_mape;
SELECT madlib.mean_abs_perc_error(
	'hitters_out_test_tbl', -- Source table
	'tbl_out_mape', -- Output table
	'predict_salary', -- Predicted value
	'actual_salary' -- Actual value
	);

SELECT * FROM tbl_out_mape;

-- Calculate Adjusted R2 Score
DROP TABLE IF EXISTS tbl_out_adj_r2_score;
SELECT madlib.adjusted_r2_score(
	'hitters_out_test_tbl', -- Source table
	'tbl_out_adj_r2_score', -- Output table
	'predict_salary', -- Predicted value
	'actual_salary', -- Actual value
	10, -- number of variables
	54 -- number of observations
	);

SELECT * FROM tbl_out_adj_r2_score;


-------------------------------------
/* ElasticNet with Cross Validation */
-------------------------------------
DROP TABLE IF EXISTS hitters_en, hitters_en_summary, hitters_en_cv;
SELECT madlib.elastic_net_train(
	'hitters_out_train', -- Source table
	'hitters_en', -- Result table
	'salary_log', -- Output variable
	'ARRAY[hits, hm_run, runs, rbi, walks, years, c_at_bat, c_hits, c_hm_run, c_walks, put_outs, division_w, league_n, hits_walks_inter, years_quadratic]', -- Input variable
	'gaussian', -- Regression family
	0.5, -- Alpha value. (1 LASSO, 0 means Ridge)
	20, -- Lambda value
	TRUE, -- Standardizatiion
	NULL, -- Grouping column
	'fista', -- Optimizer
	$$ n_folds = 3, -- Cross validation parameters
		validation_result = hitters_en_cv, 
		n_lambdas = 3, 
		alpha = {0, 0.1, 1}
	$$, 
	NULL, -- Excluded columns
	10000, -- Maximum iterations
	1e-6 -- Tolerance value
);

-- View the results
SELECT * FROM hitters_en;

-- Details of the cross validation
SELECT * FROM hitters_en_cv ORDER BY lambda_value DESC, alpha ASC;




------------------------------------------
-- Fitting Regression Model Using PL/R
------------------------------------------

------------------------------------------
-- (1) Create array version of table : parallel modeling by new_league
DROP TABLE IF EXISTS hitters_array;
CREATE TABLE hitters_array AS
	SELECT 
		new_league::TEXT new_league, 
		array_agg(salary_log::DOUBLE PRECISION) salary_log, 
		array_agg(hits::INTEGER) hits, 
		array_agg(hm_run::INTEGER) hm_run,
		array_agg(runs::INTEGER) runs, 
		array_agg(rbi::INTEGER) rbi, 
		array_agg(walks::INTEGER) walks, 
		array_agg(years::INTEGER) years, 
		array_agg(c_at_bat::INTEGER) c_at_bat, 
		array_agg(c_hits::INTEGER) c_hits, 
		array_agg(c_hm_run::INTEGER) c_hm_run, 
		array_agg(c_walks::INTEGER) c_walks, 
		array_agg(put_outs::INTEGER) put_outs, 
		array_agg(league_n::INTEGER) league_n, 
		array_agg(division_w::INTEGER) division_w, 
		array_agg(hits_walks_inter::INTEGER) hits_walks_inter, 
		array_agg(years_quadratic::INTEGER) years_quadratic
	FROM hitters_2
	GROUP BY new_league
	DISTRIBUTED BY (new_league);

SELECT * FROM hitters_array LIMIT 5; 


--Create TYPE to store model results
DROP TYPE IF EXISTS lm_plr_output_type CASCADE;
CREATE TYPE lm_plr_output_type AS (
	Variable text, 
	Coef_Est float, 
	Std_Error float, 
	T_Stat float, 
	P_Value float
	);


-- Create function 
CREATE OR REPLACE FUNCTION 
	lm_plr(
		salary_log DOUBLE PRECISION[], 
		hits INTEGER[], 
		hm_run INTEGER[],
		runs INTEGER[], 
		rbi INTEGER[], 
		walks INTEGER[], 
		years INTEGER[], 
		c_at_bat INTEGER[], 
		c_hits INTEGER[], 
		c_hm_run INTEGER[], 
		c_walks INTEGER[], 
		put_outs INTEGER[], 
		league_n INTEGER[], 
		division_w INTEGER[], 
		hits_walks_inter INTEGER[], 
		years_quadratic INTEGER[]
		)  
RETURNS SETOF lm_plr_output_type AS 
$$ 
    m1 <- lm(salary_log ~ hits + hm_run + runs + rbi + walks + years + c_at_bat + c_hits + c_hm_run + c_walks + 
		put_outs + league_n + division_w + hits_walks_inter + years_quadratic)
    m1_s <- summary(m1)$coef
    temp_m1 <- data.frame(rownames(m1_s), m1_s)
    return(temp_m1)
$$ 
LANGUAGE 'plr';


--Run function
DROP TABLE IF EXISTS lm_plr_output;
CREATE TABLE lm_plr_output as 
SELECT 
	new_league, 
	(lm_plr(salary_log, hits, hm_run, runs, rbi, walks, years, c_at_bat, c_hits, c_hm_run, c_walks, put_outs, league_n, division_w, hits_walks_inter, years_quadratic)).*
  FROM hitters_array;

SELECT * from lm_plr_output ORDER BY 1;


------------------------------------------
-- (2) Create array version of table : one model by all
DROP TABLE IF EXISTS hitters_array_all;
CREATE TABLE hitters_array_all AS
	SELECT 
		array_agg(salary_log::DOUBLE PRECISION) salary_log, 
		array_agg(hits::INTEGER) hits, 
		array_agg(hm_run::INTEGER) hm_run,
		array_agg(runs::INTEGER) runs, 
		array_agg(rbi::INTEGER) rbi, 
		array_agg(walks::INTEGER) walks, 
		array_agg(years::INTEGER) years, 
		array_agg(c_at_bat::INTEGER) c_at_bat, 
		array_agg(c_hits::INTEGER) c_hits, 
		array_agg(c_hm_run::INTEGER) c_hm_run, 
		array_agg(c_walks::INTEGER) c_walks, 
		array_agg(put_outs::INTEGER) put_outs, 
		array_agg(league_n::INTEGER) league_n, 
		array_agg(division_w::INTEGER) division_w, 
		array_agg(hits_walks_inter::INTEGER) hits_walks_inter, 
		array_agg(years_quadratic::INTEGER) years_quadratic
	FROM hitters_2;

SELECT * FROM hitters_array_all LIMIT 5; 


--Create TYPE to store model results
DROP TYPE IF EXISTS lm_plr_output_type CASCADE;
CREATE TYPE lm_plr_output_type AS (
	Variable text, 
	Coef_Est float, 
	Std_Error float, 
	T_Stat float, 
	P_Value float
	);


-- Create function 
CREATE OR REPLACE FUNCTION 
	lm_plr(
		salary_log DOUBLE PRECISION[], 
		hits INTEGER[], 
		hm_run INTEGER[],
		runs INTEGER[], 
		rbi INTEGER[], 
		walks INTEGER[], 
		years INTEGER[], 
		c_at_bat INTEGER[], 
		c_hits INTEGER[], 
		c_hm_run INTEGER[], 
		c_walks INTEGER[], 
		put_outs INTEGER[], 
		league_n INTEGER[], 
		division_w INTEGER[], 
		hits_walks_inter INTEGER[], 
		years_quadratic INTEGER[]
		)  
RETURNS SETOF lm_plr_output_type AS 
$$ 
    m1 <- lm(salary_log ~ hits + hm_run + runs + rbi + walks + years + c_at_bat + c_hits + c_hm_run + c_walks + 
		put_outs + league_n + division_w + hits_walks_inter + years_quadratic)
    m1_s <- summary(m1)$coef
    temp_m1 <- data.frame(rownames(m1_s), m1_s)
    return(temp_m1)
$$ 
LANGUAGE 'plr';


--Run function
DROP TABLE IF EXISTS lm_plr_output_all;
CREATE TABLE lm_plr_output_all as 
SELECT 
	(lm_plr(salary_log, hits, hm_run, runs, rbi, walks, years, c_at_bat, c_hits, c_hm_run, 
		c_walks, put_outs, league_n, division_w, hits_walks_inter, years_quadratic)).*
  FROM hitters_array_all;

SELECT * from lm_plr_output_all ORDER BY 1;
